#!/bin/bash

# ===============================================
# LaravelProjectContainer - Domain Management Script
# ===============================================
# Script untuk mengelola domain dan SSL certificates
# Penggunaan: ./domain.sh [command] [arguments]
# ===============================================

# Warna untuk output Terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Directory paths
PROJECTS_DIR="/var/www/html/projects"
CURRENT_PROJECT_FILE="/tmp/current_laravel_project"
CADDY_CONFIG_DIR="/etc/caddy"
DOMAINS_CONFIG_FILE="/var/www/html/Terminal/domains.conf"
CUSTOM_CADDYFILE="/etc/caddy/domains.Caddyfile"

# Helper functions
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${WHITE}  LaravelProjectContainer - Domain Mgmt${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ $1${NC}"
}

# Get current project
get_current_project() {
    if [ -f "$CURRENT_PROJECT_FILE" ]; then
        cat "$CURRENT_PROJECT_FILE"
    else
        echo ""
    fi
}

# Initialize domains config file
init_domains_config() {
    if [ ! -f "$DOMAINS_CONFIG_FILE" ]; then
        cat > "$DOMAINS_CONFIG_FILE" << 'EOF'
# Domain mappings for LaravelProjectContainer
# Format: domain|project_name|type|ssl_enabled
# type: dev|staging|production
# ssl_enabled: true|false

# Development domains (auto-added)
localhost:8000|default|dev|false
localhost:8001|default|dev|false
localhost:8002|default|dev|false
localhost:8003|default|dev|false
EOF
        print_info "Created domains config file"
    fi
}

# Add domain to config
add_domain_config() {
    local domain=$1
    local project=$2
    local type=${3:-"production"}
    local ssl=${4:-"true"}
    
    init_domains_config
    
    # Remove existing entry if exists
    sed -i "/^${domain}|/d" "$DOMAINS_CONFIG_FILE"
    
    # Add new entry
    echo "${domain}|${project}|${type}|${ssl}" >> "$DOMAINS_CONFIG_FILE"
}

# Remove domain from config
remove_domain_config() {
    local domain=$1
    
    if [ -f "$DOMAINS_CONFIG_FILE" ]; then
        sed -i "/^${domain}|/d" "$DOMAINS_CONFIG_FILE"
    fi
}

# Get project for domain
get_project_for_domain() {
    local domain=$1
    
    if [ -f "$DOMAINS_CONFIG_FILE" ]; then
        grep "^${domain}|" "$DOMAINS_CONFIG_FILE" | cut -d'|' -f2
    fi
}

# Generate Caddyfile for custom domains
generate_caddyfile() {
    init_domains_config
    
    cat > "$CUSTOM_CADDYFILE" << 'EOF'
# Custom domain configurations for LaravelProjectContainer
# This file is auto-generated by domain.sh script

EOF
    
    while IFS='|' read -r domain project type ssl_enabled; do
        # Skip comments and empty lines
        [[ "$domain" =~ ^#.*$ ]] && continue
        [[ -z "$domain" ]] && continue
        
        # Skip localhost development domains
        [[ "$domain" =~ ^localhost: ]] && continue
        
        local project_path="$PROJECTS_DIR/$project"
        
        cat >> "$CUSTOM_CADDYFILE" << EOF
# Domain: $domain (Project: $project, Type: $type)
$domain {
    root * $project_path/public
    
    # PHP processing dengan FrankenPHP
    php_server
    
    # Handle Laravel routing
    try_files {path} {path}/ /index.php?{query}
    
EOF

        if [ "$ssl_enabled" = "true" ]; then
            cat >> "$CUSTOM_CADDYFILE" << 'EOF'
    # TLS configuration
    tls {
        protocols tls1.2 tls1.3
    }
    
EOF
        else
            cat >> "$CUSTOM_CADDYFILE" << 'EOF'
    # Disable TLS for development
    tls off
    
EOF
        fi

        if [ "$type" = "production" ]; then
            cat >> "$CUSTOM_CADDYFILE" << 'EOF'
    # Production security headers
    header {
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        Referrer-Policy strict-origin-when-cross-origin
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;"
    }
    
    # Performance optimizations
    encode gzip br
    
    # Static file caching
    @static {
        file
        path *.css *.js *.png *.jpg *.jpeg *.gif *.ico *.woff *.woff2 *.ttf *.eot *.svg *.webp
    }
    handle @static {
        header Cache-Control "public, max-age=31536000, immutable"
    }
    
    # Rate limiting
    rate_limit {
        zone production {
            key {remote_host}
            events 100
            window 1m
        }
    }
    
EOF
        else
            cat >> "$CUSTOM_CADDYFILE" << 'EOF'
    # Development/Staging headers
    header {
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }
    
    # Handle preflight requests
    @options {
        method OPTIONS
    }
    handle @options {
        respond 200
    }
    
EOF
        fi

        cat >> "$CUSTOM_CADDYFILE" << 'EOF'
    # Gzip compression
    encode gzip
    
    # Logging
    log {
        output file /var/log/laravel/{domain}.log
        format json
    }
}

EOF
    done < "$DOMAINS_CONFIG_FILE"
    
    print_success "Caddyfile updated with custom domains"
}

# Reload Caddy configuration
reload_caddy() {
    if supervisorctl status frankenphp > /dev/null 2>&1; then
        supervisorctl restart frankenphp
        print_success "FrankenPHP configuration reloaded"
    else
        print_warning "FrankenPHP not running via supervisor, attempting direct reload..."
        pkill -USR1 caddy 2>/dev/null || print_warning "Could not reload Caddy"
    fi
}

# Command: add - Add domain
cmd_add() {
    local domain=$1
    local project=${2:-$(get_current_project)}
    local type=${3:-"production"}
    
    if [ -z "$domain" ]; then
        print_error "Domain harus diisi!"
        echo -e "${YELLOW}Penggunaan: ./domain.sh add <domain> [project] [type]${NC}"
        echo -e "${CYAN}Types: dev, staging, production${NC}"
        exit 1
    fi
    
    if [ -z "$project" ]; then
        print_error "Project tidak ditemukan!"
        print_info "Gunakan './project.sh switch nama_project' atau specify project name"
        exit 1
    fi
    
    local project_path="$PROJECTS_DIR/$project"
    if [ ! -d "$project_path" ]; then
        print_error "Project tidak ditemukan: $project"
        exit 1
    fi
    
    print_info "Adding domain: $domain -> $project ($type)"
    
    # Determine SSL based on domain type
    local ssl_enabled="true"
    if [[ "$domain" =~ ^localhost ]] || [[ "$domain" =~ \.test$ ]] || [ "$type" = "dev" ]; then
        ssl_enabled="false"
    fi
    
    add_domain_config "$domain" "$project" "$type" "$ssl_enabled"
    generate_caddyfile
    reload_caddy
    
    print_success "Domain $domain berhasil ditambahkan!"
    print_info "Project: $project"
    print_info "Type: $type"
    print_info "SSL: $ssl_enabled"
    
    if [ "$ssl_enabled" = "true" ]; then
        print_info "SSL certificate akan otomatis di-generate oleh Caddy"
    fi
}

# Command: remove - Remove domain
cmd_remove() {
    local domain=$1
    
    if [ -z "$domain" ]; then
        print_error "Domain harus diisi!"
        echo -e "${YELLOW}Penggunaan: ./domain.sh remove <domain>${NC}"
        exit 1
    fi
    
    local project=$(get_project_for_domain "$domain")
    if [ -z "$project" ]; then
        print_error "Domain tidak ditemukan: $domain"
        exit 1
    fi
    
    print_warning "Menghapus domain: $domain"
    read -p "Apakah Anda yakin? (yes/no): " confirm
    if [ "$confirm" != "yes" ]; then
        print_info "Penghapusan domain dibatalkan"
        exit 0
    fi
    
    remove_domain_config "$domain"
    generate_caddyfile
    reload_caddy
    
    print_success "Domain $domain berhasil dihapus!"
}

# Command: list - List all domains
cmd_list() {
    init_domains_config
    
    print_header
    print_info "Configured Domains:\n"
    
    printf "%-25s %-15s %-10s %-5s\n" "Domain" "Project" "Type" "SSL"
    printf "%-25s %-15s %-10s %-5s\n" "-------------------------" "---------------" "----------" "-----"
    
    while IFS='|' read -r domain project type ssl_enabled; do
        # Skip comments and empty lines
        [[ "$domain" =~ ^#.*$ ]] && continue
        [[ -z "$domain" ]] && continue
        
        printf "%-25s %-15s %-10s %-5s\n" "$domain" "$project" "$type" "$ssl_enabled"
    done < "$DOMAINS_CONFIG_FILE"
}

# Command: switch - Switch project to different domain
cmd_switch() {
    local project=${1:-$(get_current_project)}
    local domain=$2
    
    if [ -z "$project" ] || [ -z "$domain" ]; then
        print_error "Project dan domain harus diisi!"
        echo -e "${YELLOW}Penggunaan: ./domain.sh switch <project> <domain>${NC}"
        exit 1
    fi
    
    local project_path="$PROJECTS_DIR/$project"
    if [ ! -d "$project_path" ]; then
        print_error "Project tidak ditemukan: $project"
        exit 1
    fi
    
    # Check if domain already exists
    local existing_project=$(get_project_for_domain "$domain")
    if [ -n "$existing_project" ] && [ "$existing_project" != "$project" ]; then
        print_warning "Domain $domain sudah digunakan oleh project: $existing_project"
        read -p "Replace dengan project $project? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
            print_info "Switch domain dibatalkan"
            exit 0
        fi
    fi
    
    # Determine type and SSL
    local type="production"
    local ssl_enabled="true"
    
    if [[ "$domain" =~ ^localhost ]] || [[ "$domain" =~ \.test$ ]]; then
        type="dev"
        ssl_enabled="false"
    elif [[ "$domain" =~ staging\. ]] || [[ "$domain" =~ \.staging\. ]]; then
        type="staging"
    fi
    
    add_domain_config "$domain" "$project" "$type" "$ssl_enabled"
    generate_caddyfile
    reload_caddy
    
    print_success "Project $project switched to domain: $domain"
    print_info "Type: $type"
    print_info "SSL: $ssl_enabled"
}

# Command: ssl - Manage SSL certificates
cmd_ssl() {
    local action=${1:-"status"}
    local domain=$2
    
    case "$action" in
        "status")
            if [ -z "$domain" ]; then
                print_info "SSL Certificate Status for all domains:"
                
                while IFS='|' read -r domain project type ssl_enabled; do
                    [[ "$domain" =~ ^#.*$ ]] && continue
                    [[ -z "$domain" ]] && continue
                    [[ "$ssl_enabled" != "true" ]] && continue
                    
                    echo -n "Domain: $domain - "
                    if openssl s_client -connect "${domain}:443" -servername "$domain" </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null; then
                        echo -e "${GREEN}SSL Active${NC}"
                    else
                        echo -e "${RED}SSL Not Active${NC}"
                    fi
                done < "$DOMAINS_CONFIG_FILE"
            else
                print_info "SSL status for: $domain"
                openssl s_client -connect "${domain}:443" -servername "$domain" </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || print_error "No SSL certificate found"
            fi
            ;;
        "enable")
            if [ -z "$domain" ]; then
                print_error "Domain harus diisi untuk enable SSL"
                exit 1
            fi
            
            local project=$(get_project_for_domain "$domain")
            if [ -z "$project" ]; then
                print_error "Domain tidak ditemukan: $domain"
                exit 1
            fi
            
            # Update domain config to enable SSL
            local type=$(grep "^${domain}|" "$DOMAINS_CONFIG_FILE" | cut -d'|' -f3)
            add_domain_config "$domain" "$project" "$type" "true"
            generate_caddyfile
            reload_caddy
            
            print_success "SSL enabled untuk domain: $domain"
            print_info "Certificate akan otomatis di-generate oleh Caddy"
            ;;
        "disable")
            if [ -z "$domain" ]; then
                print_error "Domain harus diisi untuk disable SSL"
                exit 1
            fi
            
            local project=$(get_project_for_domain "$domain")
            if [ -z "$project" ]; then
                print_error "Domain tidak ditemukan: $domain"
                exit 1
            fi
            
            # Update domain config to disable SSL
            local type=$(grep "^${domain}|" "$DOMAINS_CONFIG_FILE" | cut -d'|' -f3)
            add_domain_config "$domain" "$project" "$type" "false"
            generate_caddyfile
            reload_caddy
            
            print_success "SSL disabled untuk domain: $domain"
            ;;
        "renew")
            print_info "Forcing SSL certificate renewal..."
            # Restart Caddy to force certificate renewal
            reload_caddy
            print_success "Certificate renewal initiated"
            ;;
        *)
            print_error "SSL action tidak dikenal: $action"
            echo -e "${YELLOW}Available actions:${NC}"
            echo -e "• ${GREEN}status [domain]${NC} - Check SSL status"
            echo -e "• ${GREEN}enable <domain>${NC} - Enable SSL for domain"
            echo -e "• ${GREEN}disable <domain>${NC} - Disable SSL for domain"
            echo -e "• ${GREEN}renew${NC} - Force certificate renewal"
            ;;
    esac
}

# Command: test - Test domain configuration
cmd_test() {
    local domain=${1:-"localhost"}
    
    print_info "Testing domain configuration: $domain"
    
    # Test HTTP
    if curl -s -o /dev/null -w "%{http_code}" "http://$domain" | grep -q "200"; then
        print_success "HTTP connection: OK"
    else
        print_error "HTTP connection: Failed"
    fi
    
    # Test HTTPS if SSL enabled
    local ssl_enabled=$(grep "^${domain}|" "$DOMAINS_CONFIG_FILE" 2>/dev/null | cut -d'|' -f4)
    if [ "$ssl_enabled" = "true" ]; then
        if curl -s -o /dev/null -w "%{http_code}" "https://$domain" | grep -q "200"; then
            print_success "HTTPS connection: OK"
        else
            print_error "HTTPS connection: Failed"
        fi
    else
        print_info "HTTPS: Disabled for this domain"
    fi
    
    # DNS resolution test
    if nslookup "$domain" >/dev/null 2>&1; then
        print_success "DNS resolution: OK"
    else
        print_warning "DNS resolution: Failed (normal for local domains)"
    fi
}

# Command: logs - Show domain access logs
cmd_logs() {
    local domain=$1
    local lines=${2:-50}
    
    if [ -z "$domain" ]; then
        print_error "Domain harus diisi!"
        echo -e "${YELLOW}Penggunaan: ./domain.sh logs <domain> [lines]${NC}"
        exit 1
    fi
    
    local log_file="/var/log/laravel/${domain}.log"
    
    if [ -f "$log_file" ]; then
        print_info "Showing last $lines lines for domain: $domain"
        tail -n "$lines" "$log_file"
    else
        print_warning "Log file tidak ditemukan: $log_file"
        print_info "Domain mungkin belum menerima traffic"
    fi
}

# Command: backup - Backup domain configuration
cmd_backup() {
    local backup_file="${1:-domain_config_$(date +%Y%m%d_%H%M%S).conf}"
    
    if [ -f "$DOMAINS_CONFIG_FILE" ]; then
        cp "$DOMAINS_CONFIG_FILE" "$backup_file"
        print_success "Domain configuration backed up to: $backup_file"
    else
        print_error "No domain configuration to backup"
    fi
}

# Command: restore - Restore domain configuration
cmd_restore() {
    local backup_file=$1
    
    if [ -z "$backup_file" ]; then
        print_error "Backup file harus diisi!"
        echo -e "${YELLOW}Penggunaan: ./domain.sh restore <backup_file>${NC}"
        exit 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        print_error "Backup file tidak ditemukan: $backup_file"
        exit 1
    fi
    
    print_warning "Ini akan menimpa konfigurasi domain saat ini!"
    read -p "Apakah Anda yakin? (yes/no): " confirm
    if [ "$confirm" != "yes" ]; then
        print_info "Restore dibatalkan"
        exit 0
    fi
    
    cp "$backup_file" "$DOMAINS_CONFIG_FILE"
    generate_caddyfile
    reload_caddy
    
    print_success "Domain configuration restored from: $backup_file"
}

# Command: help - Tampilkan bantuan
cmd_help() {
    print_header
    echo -e "${WHITE}Domain Management Commands${NC}\n"
    
    echo -e "${CYAN}Domain Operations:${NC}"
    echo -e "  ${GREEN}add <domain> [project] [type]${NC}  - Add domain"
    echo -e "  ${GREEN}remove <domain>${NC}                - Remove domain"
    echo -e "  ${GREEN}list${NC}                           - List all domains"
    echo -e "  ${GREEN}switch <project> <domain>${NC}      - Switch project domain"
    
    echo -e "\n${CYAN}SSL Management:${NC}"
    echo -e "  ${GREEN}ssl status [domain]${NC}            - Check SSL status"
    echo -e "  ${GREEN}ssl enable <domain>${NC}            - Enable SSL"
    echo -e "  ${GREEN}ssl disable <domain>${NC}           - Disable SSL"
    echo -e "  ${GREEN}ssl renew${NC}                      - Force cert renewal"
    
    echo -e "\n${CYAN}Testing & Monitoring:${NC}"
    echo -e "  ${GREEN}test [domain]${NC}                  - Test domain config"
    echo -e "  ${GREEN}logs <domain> [lines]${NC}          - Show access logs"
    
    echo -e "\n${CYAN}Backup & Restore:${NC}"
    echo -e "  ${GREEN}backup [file]${NC}                  - Backup domain config"
    echo -e "  ${GREEN}restore <file>${NC}                 - Restore domain config"
    
    echo -e "\n${CYAN}Domain Types:${NC}"
    echo -e "  ${GREEN}dev${NC} - Development (no SSL, CORS enabled)"
    echo -e "  ${GREEN}staging${NC} - Staging (SSL enabled, relaxed security)"
    echo -e "  ${GREEN}production${NC} - Production (SSL + full security)"
    
    echo -e "\n${YELLOW}SSL Auto-Detection:${NC}"
    echo -e "• localhost/* domains: SSL disabled"
    echo -e "• *.test domains: SSL disabled"
    echo -e "• staging.* domains: SSL enabled, type=staging"
    echo -e "• Other domains: SSL enabled, type=production"
    
    echo -e "\n${CYAN}Examples:${NC}"
    echo -e "  ./domain.sh add myapp.test myapp dev"
    echo -e "  ./domain.sh add myapp.com myapp production"
    echo -e "  ./domain.sh ssl enable myapp.com"
    echo -e "  ./domain.sh test myapp.com"
    echo -e "  ./domain.sh logs myapp.com 100"
}

# Main script logic
main() {
    case "${1:-help}" in
        "add")
            shift
            cmd_add "$@"
            ;;
        "remove"|"rm")
            shift
            cmd_remove "$@"
            ;;
        "list"|"ls")
            cmd_list
            ;;
        "switch")
            shift
            cmd_switch "$@"
            ;;
        "ssl")
            shift
            cmd_ssl "$@"
            ;;
        "test")
            shift
            cmd_test "$@"
            ;;
        "logs")
            shift
            cmd_logs "$@"
            ;;
        "backup"|"bak")
            shift
            cmd_backup "$@"
            ;;
        "restore"|"res")
            shift
            cmd_restore "$@"
            ;;
        "help"|"-h"|"--help"|*)
            cmd_help
            ;;
    esac
}

# Jalankan script
main "$@"